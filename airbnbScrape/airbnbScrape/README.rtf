{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 My first steps to solving the problem would be finding a library that could make scraping websites easy. I\'92ve decided to use the Scrapy library on the Python language. \
\
I first need to identify the structure of the website so I know exactly which elements need to be used as selectors for the scraping. \
\
In terms of what I actually did, I first used Scrapy to try and scrape the property name from the site. The first issue that I ran into was that Scrapy couldn\'92t actually retrieve any information from Airbnb; most likely due to the fact it\'92s dynamically loaded content. I decided to use Selenium in tandem with Scrapy so I could simulate an actual browser and retrieve the information that I wanted. After doing this, I was able to retrieve the elements that I needed.\
\
Scrapy typically only handles sites that return 200 status codes, however Airbnb doesn\'92t return an actual status code as far as I\'92m concerned; even if the property is a forbidden one. So I just put the main code in a try-except block; with the except block checking for the element containing the \'91403\'92 code. That way the bot would continue running without crashing.\
\
scrapy crawl airbnb -o test.json is needed to run the bot from the terminal. I\'92m using JSON because it\'92s an easy format to read.\
\
The way to retrieve the amenities was a bit overcomplicated and would probably be easier with API access.}